<link rel="stylesheet" href="//kendo.cdn.telerik.com/2017.1.223/styles/kendo.common-bootstrap.min.css" />
<link rel="stylesheet" href="//kendo.cdn.telerik.com/2017.1.223/styles/kendo.bootstrap.min.css" />
<script src="//kendo.cdn.telerik.com/2017.1.223/js/kendo.all.min.js"></script>
<script src="//kendo.cdn.telerik.com/2017.1.223/js/kendo.aspnetmvc.min.js"></script>

@*@System.Web.Optimization.Styles.Render("~/Content/kendo.common-bootstrap.min.css")
    @System.Web.Optimization.Styles.Render("~/Content/kendo.common-bootstrap.min.css")
    @System.Web.Optimization.Scripts.Render("~/Scripts/kendo.all.min.js")
    @System.Web.Optimization.Scripts.Render("~/Scripts/kendo.aspnetmvc.min.js")*@
@System.Web.Optimization.Scripts.Render("~/Scripts/DocumentQueue.js")

<div class="container-fluid">
    <div class="row">

        @(Html.Kendo().Grid<HPE.Kruta.Model.ViewModels.QueueWithSequence>()
      .Name("DocumentQueue")
      .Columns(columns =>
      {
          columns.Template(t => { })
                 .ClientTemplate("<input type='checkbox' id='chkSelect' value='#= QueueID #' data-docid='#= DocumentID #' />")
                 .Width(30)
                 .HtmlAttributes(new { style = "text-align: center" })
                 .HeaderTemplate("<span title='Select all documents'><input type='checkbox' id='selectAll' /></span>")
                 .HeaderHtmlAttributes(new { style = "text-align: center" });
          columns.Template(t => { }).Title("ID").ClientTemplate("#= renderDocumentQueueRowNumber(data) #").Width(50);
          columns.Bound(c => c.ReceivedDateTime).Title("Received Date").Format("{0:MM/dd/yyyy}").Width(200);
          columns.Bound(c => c.RecordedDateTime).Title("Recorded Date").Format("{0:MM/dd/yyyy}").Width(200);
          columns.Bound(c => c.ParcelNumber).Title("Parcel Number").Width(200).Filterable(f => f.Cell(c => c.SuggestionOperator(FilterType.Contains)));
          columns.Bound(c => c.DocumentNumber).ClientTemplate("<a href='javascript:void(0);' onclick='OpenDocument(#=DocumentID#);'>#=DocumentNumber#</a>").Title("Document Number").Width(200).Filterable(f => f.Cell(c => c.SuggestionOperator(FilterType.Contains)));
          columns.Bound(c => c.DocumentSubTypeCode).Title("Document Type").Width(200).Filterable(f => f.Cell(c => c.SuggestionOperator(FilterType.Contains)));
          columns.Bound(c => c.DepartmentName).Title("Queue/Department").Width(200).Filterable(f => f.Cell(c => c.SuggestionOperator(FilterType.Contains)));
          columns.Bound(c => c.EmployeeName).Title("Assigned To").Width(200);
          columns.Bound(c => c.QueueStatus).Title("Status").Width(200).Filterable(f => f.Cell(c => c.SuggestionOperator(FilterType.Contains)));
          columns.Bound(c => c.DocumentStatus).Title("Document Status").Width(200).Filterable(f => f.Cell(c => c.SuggestionOperator(FilterType.Contains)));
          columns.Bound(c => c.PropertyCaseID).Title("Related Case").ClientTemplate("#if(PropertyCaseID != null){#" +
              "<a href='/PropertyCaseInformation/Index/#=PropertyCaseID#'>#=PropertyCaseID#</a>#} else {#" +  "" + "# } #").Width(200).Filterable(f => f.Cell(c => c.SuggestionOperator(FilterType.Contains)));
          columns.Bound(c => c.DepartmentCode).Title("Flagged").Width(200).Filterable(f => f.Cell(c => c.SuggestionOperator(FilterType.Contains)));
      })
      .Scrollable()
      .Sortable()
      .ColumnMenu(m => m.Filterable(false).Sortable(false))
      .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
      .Selectable()
      .Pageable(pageable => pageable
                            .PageSizes(new string[] { "5", "10", "20", "50", "All" })
                            .ButtonCount(5))
      .DataSource(dataSource => dataSource
                                .Ajax()
                                .Sort(sort => sort.Add("Sequence").Ascending())
                                .PageSize(10)
                                .Read(read => read.Action("Queues_Read", "DocumentQueue"))
                                )
      .Resizable(resize => resize.Columns(true))
      .Reorderable(reorder => reorder.Columns(true))
      .Events(events => events
            .DataBound("onDocumentQueueDataBound")
        )
        )
    </div>
</div>
<input id="selectedQueueIds" name="selectedQueueIds" type="hidden">