<link rel="stylesheet" href="//kendo.cdn.telerik.com/2017.1.118/styles/kendo.common-bootstrap.min.css" />
<link rel="stylesheet" href="//kendo.cdn.telerik.com/2017.1.118/styles/kendo.bootstrap.min.css" />
<script src="//kendo.cdn.telerik.com/2017.1.118/js/kendo.all.min.js"></script>
<script src="//kendo.cdn.telerik.com/2017.1.118/js/kendo.aspnetmvc.min.js"></script>
@System.Web.Optimization.Scripts.Render("~/Scripts/DocumentQueue.js")


<div class="container-fluid text-right custom-text-right">
    <b class="custom-title-left custom-Queue">Document Queue</b>
    <div class="btn-group custom-btnGrup">
        <button type="button" class="btn warning custom-btn" id="AssignDocumentQueueCommand">Assign</button>
    </div>
    <div class="btn-group custom-btnGrup">
        <button type="button" class="btn warning custom-btn" id="RefreshDocumentQueueCommand">Refresh</button>
    </div>
</div>
<!-- Modal Start 1 -->

<div class="container-fluid">
    <div class="row">

        @(Html.Kendo().Grid<HPE.Kruta.Model.Queue>()
      .Name("DocumentQueue")
      .Columns(columns =>
      {
          columns.Bound(c => c.QueueID)
                 .ClientTemplate("<input type='checkbox' id='chkSelect' value='#= QueueID #' data-docid='#= DocumentID #' />")
                 .Filterable(cc => cc.Enabled(false))
                 .Width(30)
                 .Title("")
                 .HtmlAttributes(new { style = "text-align: center" })
                 .HeaderTemplate("<span title='Select all documents'><input type='checkbox' id='chkSelectAll' /></span>")
                 .HeaderHtmlAttributes(new { style = "text-align: center" })
                 .Sortable(false);
          columns.Bound(c => c.QueueID).Title("ID").Width(150).Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(false)));
          columns.Bound(c => c.ReceivedDateTime).Title("Received Date").Format("{0:MM/dd/yyyy}").Width(200);
          columns.Bound(c => c.RecordedDateTime).Title("Recorded Date").Format("{0:MM/dd/yyyy}").Width(200);
          columns.Bound(c => c.Property.ParcelNumber).Title("Parcel Number").Width(200);
          //columns.Bound(c => c.Document.DocumentNumber).ClientTemplate("<a href='javascript:void(0);' onclick='DisplayQueueDetails(#=QueueID#,#=DocumentID#);'>#=Document.DocumentNumber#</a>").Title("Document Number").Width(200);
          columns.Bound(c => c.Document.DocumentNumber).ClientTemplate("<a href='javascript:void(0);' onclick='OpenDocument(#=DocumentID#);'>#=Document.DocumentNumber#</a>").Title("Document Number").Width(200);
          columns.Bound(c => c.Document.DocumentSubType.Code).Title("Document Type").Width(200);
          columns.Bound(c => c.Department.DepartmentName).ClientTemplate(" #= Department ? Department.DepartmentName : '' # ").Title("Queue/Department").Width(200);
          columns.Bound(c => c.Employee.EmployeeName).ClientTemplate(" #= Employee ? Employee.EmployeeName : '' # ").Title("Assigned To").Width(200);
          columns.Bound(c => c.QueueStatus.Description).Title("Status").Width(200);
          columns.Bound(c => c.Document.DocumentStatus.Description).Title("Document Status").Width(200);
          columns.Bound(c => c.Department.DepartmentCode).ClientTemplate(" #= Department ? Department.DepartmentCode : '' # ").Title("Flagged").Width(200);
      })
      .Scrollable()
      .Sortable()
      .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
      .Selectable()
      .Pageable(pageable => pageable
                            .PageSizes(new string[] { "5", "10", "20", "50", "All" })
                            //.PageSizes(true)
                            .ButtonCount(5))
      .DataSource(dataSource => dataSource
                                .Ajax()
                                .Sort(sort => sort.Add("QueueID").Ascending())
                                .PageSize(10)
                                .Read(read => read.Action("Queues_Read", "DocumentQueue")))
      .Resizable(resize => resize.Columns(true))
      .Reorderable(reorder => reorder.Columns(true))
        )
    </div>
</div>